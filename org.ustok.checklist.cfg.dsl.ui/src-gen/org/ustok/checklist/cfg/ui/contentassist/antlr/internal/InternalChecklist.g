/*
* generated by Xtext
*/
grammar InternalChecklist;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.ustok.checklist.cfg.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.ustok.checklist.cfg.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.ustok.checklist.cfg.services.ChecklistGrammarAccess;

}

@parser::members {
 
 	private ChecklistGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ChecklistGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTitle
entryRuleTitle 
:
{ before(grammarAccess.getTitleRule()); }
	 ruleTitle
{ after(grammarAccess.getTitleRule()); } 
	 EOF 
;

// Rule Title
ruleTitle
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTitleAccess().getGroup()); }
(rule__Title__Group__0)
{ after(grammarAccess.getTitleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStep
entryRuleStep 
:
{ before(grammarAccess.getStepRule()); }
	 ruleStep
{ after(grammarAccess.getStepRule()); } 
	 EOF 
;

// Rule Step
ruleStep
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStepAccess().getGroup()); }
(rule__Step__Group__0)
{ after(grammarAccess.getStepAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule StepType
ruleStepType
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepTypeAccess().getAlternatives()); }
(rule__StepType__Alternatives)
{ after(grammarAccess.getStepTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__StepType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepTypeAccess().getSimpleEnumLiteralDeclaration_0()); }
(	'simple' 
)
{ after(grammarAccess.getStepTypeAccess().getSimpleEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getStepTypeAccess().getContainerEnumLiteralDeclaration_1()); }
(	'container' 
)
{ after(grammarAccess.getStepTypeAccess().getContainerEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getTitleAssignment_0()); }
(rule__Model__TitleAssignment_0)
{ after(grammarAccess.getModelAccess().getTitleAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getStepsAssignment_1()); }
(rule__Model__StepsAssignment_1)*
{ after(grammarAccess.getModelAccess().getStepsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Title__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Title__Group__0__Impl
	rule__Title__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Title__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTitleAccess().getTitleKeyword_0()); }

	'title:' 

{ after(grammarAccess.getTitleAccess().getTitleKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Title__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Title__Group__1__Impl
	rule__Title__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Title__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTitleAccess().getTitleAssignment_1()); }
(rule__Title__TitleAssignment_1)
{ after(grammarAccess.getTitleAccess().getTitleAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Title__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Title__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Title__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTitleAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getTitleAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Step__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Step__Group__0__Impl
	rule__Step__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepAccess().getStepKeyword_0()); }

	'step:' 

{ after(grammarAccess.getStepAccess().getStepKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Step__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Step__Group__1__Impl
	rule__Step__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepAccess().getStepIdAssignment_1()); }
(rule__Step__StepIdAssignment_1)
{ after(grammarAccess.getStepAccess().getStepIdAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Step__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Step__Group__2__Impl
	rule__Step__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getStepAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Step__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Step__Group__3__Impl
	rule__Step__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepAccess().getTypeKeyword_3()); }

	'type:' 

{ after(grammarAccess.getStepAccess().getTypeKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Step__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Step__Group__4__Impl
	rule__Step__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepAccess().getTypeAssignment_4()); }
(rule__Step__TypeAssignment_4)
{ after(grammarAccess.getStepAccess().getTypeAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Step__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Step__Group__5__Impl
	rule__Step__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepAccess().getTitleKeyword_5()); }

	'title:' 

{ after(grammarAccess.getStepAccess().getTitleKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Step__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Step__Group__6__Impl
	rule__Step__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepAccess().getTitleAssignment_6()); }
(rule__Step__TitleAssignment_6)
{ after(grammarAccess.getStepAccess().getTitleAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Step__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Step__Group__7__Impl
	rule__Step__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepAccess().getGroup_7()); }
(rule__Step__Group_7__0)?
{ after(grammarAccess.getStepAccess().getGroup_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Step__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Step__Group__8__Impl
	rule__Step__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepAccess().getGroup_8()); }
(rule__Step__Group_8__0)?
{ after(grammarAccess.getStepAccess().getGroup_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Step__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Step__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepAccess().getRightCurlyBracketKeyword_9()); }

	'}' 

{ after(grammarAccess.getStepAccess().getRightCurlyBracketKeyword_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}






















rule__Step__Group_7__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Step__Group_7__0__Impl
	rule__Step__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group_7__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepAccess().getDescriptionKeyword_7_0()); }

	'description:' 

{ after(grammarAccess.getStepAccess().getDescriptionKeyword_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Step__Group_7__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Step__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group_7__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepAccess().getDescriptionAssignment_7_1()); }
(rule__Step__DescriptionAssignment_7_1)
{ after(grammarAccess.getStepAccess().getDescriptionAssignment_7_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Step__Group_8__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Step__Group_8__0__Impl
	rule__Step__Group_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group_8__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepAccess().getChildrenKeyword_8_0()); }

	'children:' 

{ after(grammarAccess.getStepAccess().getChildrenKeyword_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Step__Group_8__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Step__Group_8__1__Impl
	rule__Step__Group_8__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group_8__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepAccess().getLeftCurlyBracketKeyword_8_1()); }

	'{' 

{ after(grammarAccess.getStepAccess().getLeftCurlyBracketKeyword_8_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Step__Group_8__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Step__Group_8__2__Impl
	rule__Step__Group_8__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group_8__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepAccess().getChildrenAssignment_8_2()); }
(rule__Step__ChildrenAssignment_8_2)*
{ after(grammarAccess.getStepAccess().getChildrenAssignment_8_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Step__Group_8__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Step__Group_8__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group_8__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepAccess().getRightCurlyBracketKeyword_8_3()); }

	'}' 

{ after(grammarAccess.getStepAccess().getRightCurlyBracketKeyword_8_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__Model__TitleAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getTitleTitleParserRuleCall_0_0()); }
	ruleTitle{ after(grammarAccess.getModelAccess().getTitleTitleParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__StepsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getStepsStepParserRuleCall_1_0()); }
	ruleStep{ after(grammarAccess.getModelAccess().getStepsStepParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Title__TitleAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTitleAccess().getTitleSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getTitleAccess().getTitleSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Step__StepIdAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepAccess().getStepIdIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getStepAccess().getStepIdIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Step__TypeAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepAccess().getTypeStepTypeEnumRuleCall_4_0()); }
	ruleStepType{ after(grammarAccess.getStepAccess().getTypeStepTypeEnumRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Step__TitleAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepAccess().getTitleSTRINGTerminalRuleCall_6_0()); }
	RULE_STRING{ after(grammarAccess.getStepAccess().getTitleSTRINGTerminalRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Step__DescriptionAssignment_7_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepAccess().getDescriptionSTRINGTerminalRuleCall_7_1_0()); }
	RULE_STRING{ after(grammarAccess.getStepAccess().getDescriptionSTRINGTerminalRuleCall_7_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Step__ChildrenAssignment_8_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepAccess().getChildrenStepParserRuleCall_8_2_0()); }
	ruleStep{ after(grammarAccess.getStepAccess().getChildrenStepParserRuleCall_8_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


