/*
* generated by Xtext
*/
package org.ustok.checklist.cfg.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ChecklistGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTitleAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTitleTitleParserRuleCall_0_0 = (RuleCall)cTitleAssignment_0.eContents().get(0);
		private final Assignment cStepsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStepsStepParserRuleCall_1_0 = (RuleCall)cStepsAssignment_1.eContents().get(0);
		
		//Model:
		//	title=Title steps+=Step*;
		public ParserRule getRule() { return rule; }

		//title=Title steps+=Step*
		public Group getGroup() { return cGroup; }

		//title=Title
		public Assignment getTitleAssignment_0() { return cTitleAssignment_0; }

		//Title
		public RuleCall getTitleTitleParserRuleCall_0_0() { return cTitleTitleParserRuleCall_0_0; }

		//steps+=Step*
		public Assignment getStepsAssignment_1() { return cStepsAssignment_1; }

		//Step
		public RuleCall getStepsStepParserRuleCall_1_0() { return cStepsStepParserRuleCall_1_0; }
	}

	public class TitleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Title");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTitleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTitleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_1_0 = (RuleCall)cTitleAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Title:
		//	"title:" title=STRING ";";
		public ParserRule getRule() { return rule; }

		//"title:" title=STRING ";"
		public Group getGroup() { return cGroup; }

		//"title:"
		public Keyword getTitleKeyword_0() { return cTitleKeyword_0; }

		//title=STRING
		public Assignment getTitleAssignment_1() { return cTitleAssignment_1; }

		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_1_0() { return cTitleSTRINGTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class StepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Step");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStepKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStepIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStepIdIDTerminalRuleCall_1_0 = (RuleCall)cStepIdAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeStepTypeEnumRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Keyword cTitleKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTitleAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTitleSTRINGTerminalRuleCall_6_0 = (RuleCall)cTitleAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cDescriptionKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cDescriptionAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_7_1_0 = (RuleCall)cDescriptionAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cChildrenKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cChildrenAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cChildrenStepParserRuleCall_8_2_0 = (RuleCall)cChildrenAssignment_8_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Step:
		//	"step:" stepId=ID "{" "type:" type=StepType "title:" title=STRING ("description:" description=STRING)? ("children:"
		//	"{" children+=Step* "}")? "}";
		public ParserRule getRule() { return rule; }

		//"step:" stepId=ID "{" "type:" type=StepType "title:" title=STRING ("description:" description=STRING)? ("children:" "{"
		//children+=Step* "}")? "}"
		public Group getGroup() { return cGroup; }

		//"step:"
		public Keyword getStepKeyword_0() { return cStepKeyword_0; }

		//stepId=ID
		public Assignment getStepIdAssignment_1() { return cStepIdAssignment_1; }

		//ID
		public RuleCall getStepIdIDTerminalRuleCall_1_0() { return cStepIdIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"type:"
		public Keyword getTypeKeyword_3() { return cTypeKeyword_3; }

		//type=StepType
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//StepType
		public RuleCall getTypeStepTypeEnumRuleCall_4_0() { return cTypeStepTypeEnumRuleCall_4_0; }

		//"title:"
		public Keyword getTitleKeyword_5() { return cTitleKeyword_5; }

		//title=STRING
		public Assignment getTitleAssignment_6() { return cTitleAssignment_6; }

		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_6_0() { return cTitleSTRINGTerminalRuleCall_6_0; }

		//("description:" description=STRING)?
		public Group getGroup_7() { return cGroup_7; }

		//"description:"
		public Keyword getDescriptionKeyword_7_0() { return cDescriptionKeyword_7_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_7_1() { return cDescriptionAssignment_7_1; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_7_1_0() { return cDescriptionSTRINGTerminalRuleCall_7_1_0; }

		//("children:" "{" children+=Step* "}")?
		public Group getGroup_8() { return cGroup_8; }

		//"children:"
		public Keyword getChildrenKeyword_8_0() { return cChildrenKeyword_8_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8_1() { return cLeftCurlyBracketKeyword_8_1; }

		//children+=Step*
		public Assignment getChildrenAssignment_8_2() { return cChildrenAssignment_8_2; }

		//Step
		public RuleCall getChildrenStepParserRuleCall_8_2_0() { return cChildrenStepParserRuleCall_8_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8_3() { return cRightCurlyBracketKeyword_8_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	
	
	public class StepTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "StepType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSimpleEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSimpleSimpleKeyword_0_0 = (Keyword)cSimpleEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cContainerEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cContainerContainerKeyword_1_0 = (Keyword)cContainerEnumLiteralDeclaration_1.eContents().get(0);
		
		//// simple: children will be ignored completely. This is for simple steps.
		//// container: for the protocol, the user will be asked a question. If the corresponding answer is YES, then
		////            the sublist steps are being processed. If NO, then the sublist steps will be skipped.
		//enum StepType:
		//	simple | container;
		public EnumRule getRule() { return rule; }

		//simple | container
		public Alternatives getAlternatives() { return cAlternatives; }

		//simple
		public EnumLiteralDeclaration getSimpleEnumLiteralDeclaration_0() { return cSimpleEnumLiteralDeclaration_0; }

		//"simple"
		public Keyword getSimpleSimpleKeyword_0_0() { return cSimpleSimpleKeyword_0_0; }

		//container
		public EnumLiteralDeclaration getContainerEnumLiteralDeclaration_1() { return cContainerEnumLiteralDeclaration_1; }

		//"container"
		public Keyword getContainerContainerKeyword_1_0() { return cContainerContainerKeyword_1_0; }
	}
	
	private ModelElements pModel;
	private TitleElements pTitle;
	private StepTypeElements unknownRuleStepType;
	private StepElements pStep;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ChecklistGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.ustok.checklist.cfg.Checklist".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	title=Title steps+=Step*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Title:
	//	"title:" title=STRING ";";
	public TitleElements getTitleAccess() {
		return (pTitle != null) ? pTitle : (pTitle = new TitleElements());
	}
	
	public ParserRule getTitleRule() {
		return getTitleAccess().getRule();
	}

	//// simple: children will be ignored completely. This is for simple steps.
	//// container: for the protocol, the user will be asked a question. If the corresponding answer is YES, then
	////            the sublist steps are being processed. If NO, then the sublist steps will be skipped.
	//enum StepType:
	//	simple | container;
	public StepTypeElements getStepTypeAccess() {
		return (unknownRuleStepType != null) ? unknownRuleStepType : (unknownRuleStepType = new StepTypeElements());
	}
	
	public EnumRule getStepTypeRule() {
		return getStepTypeAccess().getRule();
	}

	//Step:
	//	"step:" stepId=ID "{" "type:" type=StepType "title:" title=STRING ("description:" description=STRING)? ("children:"
	//	"{" children+=Step* "}")? "}";
	public StepElements getStepAccess() {
		return (pStep != null) ? pStep : (pStep = new StepElements());
	}
	
	public ParserRule getStepRule() {
		return getStepAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
