/*
* generated by Xtext
*/
grammar InternalChecklist;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.ustok.checklist.cfg.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.ustok.checklist.cfg.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.ustok.checklist.cfg.services.ChecklistGrammarAccess;

}

@parser::members {

 	private ChecklistGrammarAccess grammarAccess;
 	
    public InternalChecklistParser(TokenStream input, ChecklistGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected ChecklistGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getTitleTitleParserRuleCall_0_0()); 
	    }
		lv_title_0_0=ruleTitle		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"title",
        		lv_title_0_0, 
        		"Title");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getStepsStepParserRuleCall_1_0()); 
	    }
		lv_steps_1_0=ruleStep		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"steps",
        		lv_steps_1_0, 
        		"Step");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleTitle
entryRuleTitle returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTitleRule()); }
	 iv_ruleTitle=ruleTitle 
	 { $current=$iv_ruleTitle.current; } 
	 EOF 
;

// Rule Title
ruleTitle returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='title:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTitleAccess().getTitleKeyword_0());
    }
(
(
		lv_title_1_0=RULE_STRING
		{
			newLeafNode(lv_title_1_0, grammarAccess.getTitleAccess().getTitleSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTitleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"title",
        		lv_title_1_0, 
        		"STRING");
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTitleAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleStep
entryRuleStep returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStepRule()); }
	 iv_ruleStep=ruleStep 
	 { $current=$iv_ruleStep.current; } 
	 EOF 
;

// Rule Step
ruleStep returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='step:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStepAccess().getStepKeyword_0());
    }
(
(
		lv_stepId_1_0=RULE_ID
		{
			newLeafNode(lv_stepId_1_0, grammarAccess.getStepAccess().getStepIdIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStepRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"stepId",
        		lv_stepId_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStepAccess().getLeftCurlyBracketKeyword_2());
    }
	otherlv_3='type:' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStepAccess().getTypeKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStepAccess().getTypeStepTypeEnumRuleCall_4_0()); 
	    }
		lv_type_4_0=ruleStepType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStepRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"StepType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='title:' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getStepAccess().getTitleKeyword_5());
    }
(
(
		lv_title_6_0=RULE_STRING
		{
			newLeafNode(lv_title_6_0, grammarAccess.getStepAccess().getTitleSTRINGTerminalRuleCall_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStepRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"title",
        		lv_title_6_0, 
        		"STRING");
	    }

)
)(	otherlv_7='description:' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getStepAccess().getDescriptionKeyword_7_0());
    }
(
(
		lv_description_8_0=RULE_STRING
		{
			newLeafNode(lv_description_8_0, grammarAccess.getStepAccess().getDescriptionSTRINGTerminalRuleCall_7_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStepRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_8_0, 
        		"STRING");
	    }

)
))?(	otherlv_9='children:' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getStepAccess().getChildrenKeyword_8_0());
    }
	otherlv_10='{' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getStepAccess().getLeftCurlyBracketKeyword_8_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStepAccess().getChildrenStepParserRuleCall_8_2_0()); 
	    }
		lv_children_11_0=ruleStep		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStepRule());
	        }
       		add(
       			$current, 
       			"children",
        		lv_children_11_0, 
        		"Step");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_12='}' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getStepAccess().getRightCurlyBracketKeyword_8_3());
    }
)?	otherlv_13='}' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getStepAccess().getRightCurlyBracketKeyword_9());
    }
)
;





// Rule StepType
ruleStepType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='simple' 
	{
        $current = grammarAccess.getStepTypeAccess().getSimpleEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getStepTypeAccess().getSimpleEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='container' 
	{
        $current = grammarAccess.getStepTypeAccess().getContainerEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getStepTypeAccess().getContainerEnumLiteralDeclaration_1()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


